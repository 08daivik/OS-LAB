#include   stdio.h stdlib.h unistd.h string.h fcntl.h
sys/ types.h wait.h mman.h ipc.h shm.h stat.h

??parent.c??

int main(int argc,char *argv[])
{
int i;
void *ptr;
int shm_fd;
pid_t pid;
const int size=4096
if(argc>1)
{
sscanf(argv[1],"%d",&i);
if(i<1)
{
	printf("Incorrect input\n:");
	return 0;
}
}
else
{
	printf("Number of arguments is less");
	exit(0);
}
pid=fork();
if(pid==0)
{
execlp("./fib_child","fib",argv[1],NULL);
}
else if(pid>0)
{
wait(NULL);
printf("PARENT: child completed execution");
shm_fd=shm_open("OS",O_RDONLY,0666);
ptr=mmap(0,size,PROT_READ,MAP_SHARED,shm_fd,0);
printf("Series is..\n");
printf("%s",(char *)ptr);
shm_unlink("OS")
}
return 0;
}



??child.c??

int main(int argc,char *argv[])
{
int k=2;
int n1,n2,n3;
void *ptr;
const int size=4096;
int shm_fd=shm_open("OS",O_CREAT|O_RDWR,0666);
ftruncate(shm_fd,size);
ptr=mmap(0,size,PROT_WRITE,MAP_SHARED,shm_fd,0);
printf("child\n");
int i= atoi(argv[1]);
n1=0;n2=1;
sprintf(ptr,"%d",n1);
ptr+=strlen(ptr);
printf("%d",n1);
sprintf(ptr,"%d",n2);
ptr+=strlen(ptr);
printf("%d",n2);
while(k!=i)
{
n3=n2+n1;
sprintf(ptr,"%d",n3);
printf("%d",n3);
n1=n2;
n2=n3;
ptr+=strlen(ptr);
k++;
}
munmap(ptr,size);
close(shm_fd);
return 0;
}









