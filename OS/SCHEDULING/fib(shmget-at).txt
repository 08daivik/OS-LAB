#include  stdio.h stdlib.h unistd.h fcntl.h string.h
#include<sys/ types.h wait.h mman.h shm.h stat.h

??parent.c??

int main(int argc,char *argv[])
{
int i;
int shmid;
pid_t pid;
const int size=4096;
void *ptr;
shmid=shmget((key_t)1122,size,0666|IPC_CREAT);
ptr=shmat(shmid,NULL,0666);
if(argc>1)
{
sscanf(argv[1],"%d",&i);
if(i<1)
{
	printf("Input error");
return 0;
}
}
else
{
	printf("Error");
exit(0)
}
pid=fork();
if(pid==0)
	execlp("./Fib","Fib",argv[1],NULL);
else if(pid>0)
{
wait(NULL);
printf("PARENT: child completed");
printf("Parent printing");
printf("%s",(char *)ptr);
shmdt(ptr);
}
return 0;
}

??child.c??

int main(int argc,char *argv[])
{
void *ptr;
int shmid;
int k=2;
int n1,n2,n3;
const int size=4096;
shmid=shmget((key_t)1122,size,0666);
ptr=shmat(shmid,NULL,0666);
printf("CHILD\n");
int i= atoi(argv[1]);
n1=0;n2=1;
sprint(ptr,"%d",n1);
ptr+=strlen(ptr);
printf("%d",n1);
sprint(ptr,"%d",n2);
ptr+=strlen(ptr);
printf("%d",n2);
while(k!=i)
{
n3=n2+n1;
sprint(ptr,"%d",n3);
printf("%d",n3);
n1=n2;
n2=n3;
ptr+=strlen(ptr);
k++;
}
shmctl(shmid,IPC_RMID,NULL);
return 0;
}





















